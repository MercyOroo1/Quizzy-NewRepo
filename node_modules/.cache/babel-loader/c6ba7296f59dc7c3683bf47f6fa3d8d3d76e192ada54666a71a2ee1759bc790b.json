{"ast":null,"code":"var _jsxFileName = \"/home/mercy/Documents/Moringa/Phase-4/frontend/quizzy/src/questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport SingleQuestion from './SingleQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Questions({\n  userId\n}) {\n  _s();\n  const params = useParams(); // Get the URL parameters object\n  const quizId = params.quizId; // Access the quizId property\n\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    console.log('quizId:', quizId); // Debugging line\n    if (quizId) {\n      fetch(`http://127.0.0.1:5000/participant/quizzes/${quizId}/questions`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          \"Authorization\": \"Bearer \" + localStorage.getItem('token')\n        }\n      }).then(response => {\n        if (!response.ok) {\n          console.error('Network response was not ok', response.status, response.statusText);\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        console.log('Fetched questions:', data);\n        setQuestions(data);\n      }).catch(error => console.error('Error fetching questions:', error));\n    }\n  }, [quizId]);\n  console.log(questions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Questions for Quiz \", quizId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questions.map(question => /*#__PURE__*/_jsxDEV(SingleQuestion, {\n        question: question,\n        userId: userId\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 36\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Questions, \"pXIkQyLqlHTX5iY34IulVCTWrvg=\", false, function () {\n  return [useParams];\n});\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","useParams","SingleQuestion","jsxDEV","_jsxDEV","Questions","userId","_s","params","quizId","questions","setQuestions","console","log","fetch","headers","localStorage","getItem","then","response","ok","error","status","statusText","Error","json","data","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","map","question","id","_c","$RefreshReg$"],"sources":["/home/mercy/Documents/Moringa/Phase-4/frontend/quizzy/src/questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport SingleQuestion from './SingleQuestion';\n\nfunction Questions( {userId} ) {\n  const params = useParams(); // Get the URL parameters object\n  const quizId = params.quizId; // Access the quizId property\n\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    console.log('quizId:', quizId);  // Debugging line\n    if (quizId) {\n      fetch(`http://127.0.0.1:5000/participant/quizzes/${quizId}/questions`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          \"Authorization\": \"Bearer \" + localStorage.getItem('token')\n        }\n      })\n        .then(response => {\n          if (!response.ok) {\n            console.error('Network response was not ok', response.status, response.statusText);\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then(data => {\n          console.log('Fetched questions:', data);\n          setQuestions(data);\n        })\n        .catch(error => console.error('Error fetching questions:', error));\n    }\n  }, [quizId]);\n  console.log(questions)\n\n  return (\n    <div>\n      <h2>Questions for Quiz {quizId}</h2>\n      <ul>\n        {questions.map(question => <SingleQuestion key ={question.id} question={question} userId={userId}/>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default Questions;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,SAASA,CAAE;EAACC;AAAM,CAAC,EAAG;EAAAC,EAAA;EAC7B,MAAMC,MAAM,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMQ,MAAM,GAAGD,MAAM,CAACC,MAAM,CAAC,CAAC;;EAE9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC,CAAC,CAAE;IACjC,IAAIA,MAAM,EAAE;MACVK,KAAK,CAAC,6CAA6CL,MAAM,YAAY,EAAE;QACrEM,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC3D;MACF,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChBR,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEF,QAAQ,CAACG,MAAM,EAAEH,QAAQ,CAACI,UAAU,CAAC;UAClF,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDP,IAAI,CAACQ,IAAI,IAAI;QACZd,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEa,IAAI,CAAC;QACvCf,YAAY,CAACe,IAAI,CAAC;MACpB,CAAC,CAAC,CACDC,KAAK,CAACN,KAAK,IAAIT,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;IACtE;EACF,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EACZG,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;EAEtB,oBACEN,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,GAAI,qBAAmB,EAACnB,MAAM;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpC5B,OAAA;MAAAwB,QAAA,EACGlB,SAAS,CAACuB,GAAG,CAACC,QAAQ,iBAAI9B,OAAA,CAACF,cAAc;QAAoBgC,QAAQ,EAAEA,QAAS;QAAC5B,MAAM,EAAEA;MAAO,GAAhD4B,QAAQ,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsC,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACzB,EAAA,CAxCQF,SAAS;EAAA,QACDJ,SAAS;AAAA;AAAAmC,EAAA,GADjB/B,SAAS;AA0ClB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}