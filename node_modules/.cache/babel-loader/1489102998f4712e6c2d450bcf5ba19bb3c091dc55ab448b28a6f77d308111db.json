{"ast":null,"code":"var _jsxFileName = \"/home/mercy/Documents/Moringa/Phase-4/frontend/quizzy/src/responses/ResponseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Response from './Response';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResponseForm = ({\n  question_id,\n  quiz_id,\n  user_id\n}) => {\n  _s();\n  const [response, setResponse] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  // const [isCorrect, setIsCorrect] = useState(false);\n\n  const [data, setData] = useState({});\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log('Response submitted:', response);\n\n    // Make a POST request to create a new response\n    fetch('http://localhost:5000/participant/responses', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        response: response,\n        question_id: question_id,\n        quiz_id: quiz_id,\n        user_id: user_id\n      })\n    }).then(response => response.json()).then(data => {\n      console.log('Response created:', data);\n      setIsSubmitted(true);\n      setData(data);\n      let result = data;\n      result.map(r => /*#__PURE__*/_jsxDEV(Response, {\n        response: r\n      }, r.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this));\n    }).catch(error => console.error('Error creating response:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter your response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: response,\n        onChange: event => setResponse(event.target.value),\n        placeholder: \"Type your response here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), isSubmitted && /*#__PURE__*/_jsxDEV(Response, {\n      response: response,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ResponseForm, \"fDcvokU7qO2k9rdwIjTB/jbzMTc=\");\n_c = ResponseForm;\nexport default ResponseForm;\nvar _c;\n$RefreshReg$(_c, \"ResponseForm\");","map":{"version":3,"names":["React","useState","Response","jsxDEV","_jsxDEV","ResponseForm","question_id","quiz_id","user_id","_s","response","setResponse","isSubmitted","setIsSubmitted","data","setData","handleSubmit","event","preventDefault","console","log","fetch","method","headers","localStorage","getItem","body","JSON","stringify","then","json","result","map","r","id","fileName","_jsxFileName","lineNumber","columnNumber","catch","error","children","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/mercy/Documents/Moringa/Phase-4/frontend/quizzy/src/responses/ResponseForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Response from './Response';\n\n\nconst ResponseForm = ({ question_id, quiz_id, user_id }) => {\n  const [response, setResponse] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  // const [isCorrect, setIsCorrect] = useState(false);\n\n  const [data, setData] = useState({});\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log('Response submitted:', response);\n\n    // Make a POST request to create a new response\n    fetch('http://localhost:5000/participant/responses', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem('token')\n      },\n      body: JSON.stringify({ \n        response: response, \n        question_id: question_id, \n        quiz_id: quiz_id, \n        user_id: user_id \n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Response created:', data);\n        setIsSubmitted(true);\n        setData(data);\n        let result = data\n        result.map(r => <Response key = {r.id} response = {r}/>)\n      })\n      .catch(error => console.error('Error creating response:', error));\n  };\n  \n    return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>Enter your response:</label>\n        <input\n          type=\"text\"\n          value={response}\n          onChange={(event) => setResponse(event.target.value)}\n          placeholder=\"Type your response here\"\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      {isSubmitted && <Response response={response} data={data} />}\n    </div>\n  );\n};\n\nexport default ResponseForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}